{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","criteria","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchfield","searchChange","style","paddingBottom","type","placeholder","onChange","App","onSearchChange","event","setState","target","value","state","fetch","then","response","json","users","filteredRobots","this","filter","toLowerCase","includes","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"8NAeeA,EAbF,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,KAAMC,EAAmB,EAAnBA,SAAUC,EAAS,EAATA,GAC5B,OACI,yBAAKC,UAAU,sDACX,yBAAKC,IAAI,SAASC,IAAG,mCAA8BH,EAA9B,UACrB,6BACI,4BAAKF,GACL,sCAAYC,MCkBbK,EAtBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAEhB,OAEI,6BAEQA,EAAOC,KAAI,SAACC,EAAMC,GACd,OACI,kBAAC,EAAD,CACIC,IAAKD,EACLR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,SAAUM,EAAOG,GAAGT,gBCDjCW,EAbG,SAAC,GAAkC,EAAhCC,YAAiC,IAApBC,EAAmB,EAAnBA,aAC9B,OACI,yBAAKC,MAAO,CAAEC,cAAe,SACzB,2BACIb,UAAU,MACVc,KAAK,SACLC,YAAY,uBACZC,SAAUL,MCoDXM,G,wDA5CX,aAAe,IAAD,8BACV,gBAkBJC,eAAiB,SAACC,GAGd,EAAKC,SAAS,CAAEV,YAAaS,EAAME,OAAOC,SApB1C,EAAKC,MAAQ,CACTnB,OAAQ,GACRM,YAAa,IAJP,E,gEASO,IAAD,OAChBc,MAAM,6CACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKR,SAAS,CAAEhB,OAAQwB,S,+BAgBrC,IAAD,OACCC,EAAiBC,KAAKP,MAAMnB,OAAO2B,QAAO,SAAA3B,GAC5C,OAAOA,EAAOP,KAAKmC,cAAcC,SAAS,EAAKV,MAAMb,YAAYsB,kBAErE,OACI,yBAAKhC,UAAU,MACX,wBAAIA,UAAU,MAAd,2BACA,kBAAC,EAAD,CAAWW,aAAcmB,KAAKZ,iBAE9B,kBAAC,EAAD,CAAUd,OAAQyB,S,GAtChBK,IAAMC,YCJJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACP,kBAAC,EAAD,MACEC,SAASC,eAAe,SDyHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.951654a8.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({ name, criteria, id }) => {\r\n    return (\r\n        <div className='tc bg-light-blue dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img alt='random' src={`https://picsum.photos/id/${id}/200`} />\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>Length: {criteria}</p>\r\n            </div>\r\n        </div >\r\n\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\n\r\nconst CardList = ({ robots }) => {\r\n\r\n    return (\r\n\r\n        <div>\r\n            {\r\n                robots.map((user, i) => {\r\n                    return (\r\n                        <Card\r\n                            key={i}\r\n                            id={robots[i].id}\r\n                            name={robots[i].name}\r\n                            criteria={robots[i].criteria}\r\n                        />\r\n                    );\r\n                })\r\n\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchfield, searchChange }) => {\r\n    return (\r\n        <div style={{ paddingBottom: '20px' }}>\r\n            <input\r\n                className='pa3'\r\n                type=\"search\"\r\n                placeholder=\"Search for skills...\"\r\n                onChange={searchChange}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","// reference back to video 212 of course for support on STATE\r\n\r\nimport React from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport './App.css';\r\n// import Scroll from '../components/Scroll';\r\n\r\n// create state in order to interact between \"robots\" and \"SearchBox\"; have to pass between the parent (App.js)\r\n// const state = {\r\n//     robots: users,\r\n//     searchfield: ''\r\n// }\r\n\r\n// use class extends compontent constructor in order to build the \"state\" \r\n// since App owns \"robots\" it can change \"robots\" before being passed to \"CardList\"\r\nclass App extends React.Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            robots: [],\r\n            searchfield: ''\r\n        }\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        fetch('http://jsonplaceholder.typicode.com/users')\r\n            .then(response => response.json())\r\n            .then(users => this.setState({ robots: users }));\r\n    }\r\n\r\n    // onSearchChange is just a madeup function prompt an action from SearchBox\r\n    // event is prompting the change (e.g., DOM Manipulation sections)\r\n    // IMPORTANT - Initially had \"filteredRobots\" in onSearchChange; Moved to render to impact page rendering\r\n\r\n    onSearchChange = (event) => {\r\n        // have to add in below this.setState to change the \"searchfield\" from blank to the search event value\r\n        // can't add into searchfield because that occurs before these events within the sequence of code\r\n        this.setState({ searchfield: event.target.value })\r\n    }\r\n\r\n    // render the two core compontents \r\n    // when filteredRobots passes to CardList it'll be a prop (can't change), but the App has changed it by that point\r\n    // searchChange (from the class App) is the onSearchChange event we created above\r\n    render() {\r\n        const filteredRobots = this.state.robots.filter(robots => {\r\n            return robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\r\n        })\r\n        return (\r\n            <div className='tc'>\r\n                <h1 className=\"f2\">Current Porfolio Skills</h1>\r\n                <SearchBox searchChange={this.onSearchChange} />\r\n                {/* <Scroll> */}\r\n                <CardList robots={filteredRobots} />\r\n                {/* </Scroll> */}\r\n            </div >\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom'; //API containing following methods and a few more. render() findDOMNode() unmountComponentAtNode()\nimport './index.css'; //styles\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker'; //not something we're using\nimport 'tachyons'; // fonts\n// import { robots } from './archive/robots'; //arrays of information\n\nReactDOM.render(\n  <App />\n  , document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}